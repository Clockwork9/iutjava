package edu.iut.app;

import java.util.ArrayList;

public abstract class AbstractApplicationLog implements IApplicationLog {

	protected String message;
	protected ArrayList<IApplicationLogListener> listeners;
	
	/*
	 * Constructeur par défaut d'un ApplicationLog. 
	 */
	public AbstractApplicationLog() {
		message = null;
		listeners = new ArrayList<IApplicationLogListener>();
	}
	
	/*
	 * Remplace le message de ApplicationLog par la chaîne passée en paramètre. 
	 * 
	 * @param	message	la chaîne de caractère qui remplacera le contenu de l'attribut message
	 * @see		edu.iut.app.IApplicationLog#setMessage(java.lang.String)
	 */
	@Override
	public abstract void setMessage(String message);

	/*
	 * Retourne la chaîne stockée à l'intérieur de l'attribut message de ApplicationLog. 
	 * 
	 * @return	le message de ApplicationLog
	 * @see edu.iut.app.IApplicationLog#getMessage()
	 */
	@Override
	public String getMessage() {
		return message;
	}

	/*
	 * Ajoute un listener à la liste de listeners de ApplicationLog. 
	 * 
	 * @param	listener	le listener à ajouter
	 * @see edu.iut.app.IApplicationLog#addListener(edu.iut.app.IApplicationLogListener)
	 */
	@Override
	public void addListener(IApplicationLogListener listener) {
		listeners.add(listener);

	}
	
	/*
	 * Retourne la liste de listeners de ApplicationLog. 
	 * 
	 * @see edu.iut.app.IApplicationLog#getApplicationLogListeners()
	 */
	@Override
	public IApplicationLogListener[] getApplicationLogListeners() {
		return (IApplicationLogListener[])listeners.toArray();
	}
	
	/*
	 * Crée un nouveau message pour chaque listeners de la liste dans ApplicationLog. 
	 * 
	 * @param	level	le niveau d'importance du listener
	 * @param	message	le message à attribuer au listener
	 */
	protected void fireMessage(String level, String message) {
		for (IApplicationLogListener listener_i : listeners) {
			listener_i.newMessage(level, message);
		}
	}
}
